;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname a5q3idk) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))

(define-struct contact (name email-address))
;; A contact is a structure (make-contact n e) where
;; 	n is a non-empty string representing a person's name and
;; 	e is a non-empty string representing a person's email address.

(define-struct email (from to subject message))
;; An email is a structure (make-email f t s m) where
;; 	f is a contact representing who sent the email,
;; 	t is a contact representing who received the email,
;; 	s is a string representing the subject of the email, and
;; 	m is a non-empty string representing the text of the message.


;; Question 3
(define (make-address-book user-email-address aloe)
  
  
  
  
  ;; e-mails from user 
  ;;(equal? (contact-email-address (email-from (first aloe)) user-e-mail-adddress) 
  ;;                             (cond [(member? (e-mail-to (first aloe) (rest aloe)) (make-address-book (rest aloe))
  ;;                                   [else (cons (e-mail-to (first aloe)) (make-address-book (rest aloe)))])
  ;; e-mails to user 
  ;; (equal? (contact-email-address (e-mail-to (first aloe)) user-e-mail address)
  ;;        (cond [(member? (e-mail-from (first aloe) (rest aloe)) (make-address-book user-email-address (rest aloe))
  ;;              [else (cons (e-mail-from (first aloe)) (make-address-book user-email-address (rest aloe)))]
  ;; same user 
  ;; (equal? (email-to (first aloe) (email-from (first aloe)))
 
  ;; discard-existing-contacts
  ;; (
 
  
  
  
  ...)