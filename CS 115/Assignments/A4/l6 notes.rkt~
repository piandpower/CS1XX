;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |l6 notes|) (read-case-sensitive #t) (teachpacks ((lib "potatohead.rkt" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "potatohead.rkt" "installed-teachpacks")))))
;;make-canadian: string->string
;;produces a string in which wach o in str is replaced with ou
;examples

;;(make-canadian "mould") => "mould"
;;(make-canadian "zoo")=>"zouou"


(define (make-canadian str)
  (list->string (make-canadian-list (string->list str)))
  
  empty (cons v alist)
  
  
  ("zoo"=> (cons#/z(cons #\o(cons #\o empty))))
  
  
  
  make-char-list listof char  -> listofchar
  purpose..
  (define (make-canadian-list
           (cond [(empty? list)...]
                 [....(first clist )....
                      
                      (make-canadian-clist (rest (clist) <--- when you call the function name it is always followed by rest of the list.
                 
                 
                 
                 base case-----empty? alist
                         
                         --- (empty? (rest alist)
                                     
                                     (cons "l" -empty) true
                                     
                                     2.3
                                     empty     