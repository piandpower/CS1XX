;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |working q3|) (read-case-sensitive #t) (teachpacks ((lib "compound.rkt" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "compound.rkt" "installed-teachpacks")))))
;(define (range note1 note2)
;  (cond
;    [(= (first note1) (first  note2))
;     (add1 (- (max (second note1) (second note2))
;              (min (second note1) (second note2))))]
;    [(= 1 (- (first note1) (first note2)))
;     (+ 1 (second note1)
;        (- 12 (second note2)))]
;    [(= 1 (- (first note2) (first note1)))
;     (+ 1 (second note2)
;        (- 12 (second note1)))]
;    [(> 1 (- (first note1) (first note2)))
;     (+ 1 (* 8 (- (first note1) (first note2)))
;        (second note1) 
;        (- 12 (second note2)))]
;    [(> 1 (- (first note2) (first note1)))
;     (+ 1 (* 8 (- (first note2) (first note1)))
;        (second note2) 
;        (- 12 (second note1)))]))
;
;(range '(4 5) '(5 4))
;
;(define (top-range? top-range bar)
;  (cond
;    [(empty? (rest bar)) top-range]
;    [else (top-range? (max top-range
;                           (range (first bar) (second bar)))
;                      (rest bar))]))
;
;(top-range? 0 '((4 5) (4 11) (5 4)))

(define (high-octave notes) (filter (lambda (note) (equal? (first note)
                                                      (foldr max 0 (map first notes))))
                               notes))

(define (highest-note notes high-note)
  (local
    [(define high-octave (filter (lambda (note) (equal? (first note)
                                                      (foldr max 0 (map first notes))))
                               notes))]
  (cond
    [(empty? high-octave) high-note]
    [(= (second high-note)
        (second (first high-octave)))
     (highest-note (rest high-octave) high-note)]
    [(> (second high-note)
        (second (first high-octave)))
     (highest-note (rest high-octave) high-note)]
    [(> (second (first high-octave))
        (second high-note))
     (highest-note (rest high-octave) (first high-octave))])))

(highest-note '((3 7) (3 4) (3 8)) (list 0 0))

(define (lowest-note notes min-note)
  (local
    [(define min-octave (filter (lambda (note) (equal? (first note)
                                                      (foldr min 9 (map first notes))))
                               notes))]
  (cond
    [(empty? min-octave) min-note]
    [(= (second min-note)
        (second (first min-octave)))
     (lowest-note (rest min-octave) min-note)]
    [(< (second min-note)
        (second (first min-octave)))
     (lowest-note (rest min-octave) min-note)]
    [(< (second (first min-octave))
        (second min-note))
     (lowest-note (rest min-octave) (first min-octave))])))

(lowest-note '((3 7) (3 4) (3 8)) (list 9 13))